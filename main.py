import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import Customer_Information
from configuration import API_TOKEN, TikTokLink, InstaLink
import markups as NavButt
from Customer_Information import *


from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext



class CastomerInfo(StatesGroup):
    Name = State()
    Phone_number = State()
    Weight = State()
    BraSize = State()
    AssSize = State()
    EyeColor = State()
    Nationality = State()
    Religion = State()



# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):

    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤—ñ—Ç {0.first_name}, —Ü–µ–π –±–æ—Ç —â–µ –º–∞–ª–µ–Ω—å–∫–∏–π, —ñ –ø–æ–∫–∏ —â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–º—ñ—î'.format(message.from_user), reply_markup=NavButt.MainMenu)

@dp.message_handler(commands=['stop'])
async def send_welcom(message: types.Message):

    await bot.send_message(message.from_user.id, "–¶—å–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –Ω–µ –∑—É–ø–∏–Ω–∏—Ç–∏")


@dp.message_handler()
async def bot_message(message: types.Message):

    #await message.answer("message.text")
    #print(message.text)
    if message.text == 'ü™° –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—ñ–ª–∞':

        #await bot.send_message(message.from_user.id, '–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—ñ–ª–∞, –∞–ª–µ –ø–æ–∫–∏ —â–æ —è –∑ –Ω–∏–º–∏ –Ω—ñ—á–æ–≥–æ –∑—Ä–æ–±–∏—Ç–∏ –Ω–µ –º–æ–∂—É ü§∑‚Äç‚ôÄÔ∏è')

        await bot.send_message(message.from_user.id, "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –¥–∞–Ω—ñ –ø—Ä–æ —Å–µ–±–µ\n –í–∞—à–µ —ñ–º'—è")
        await CastomerInfo.Name.set()

        @dp.message_handler(state=CastomerInfo.Name)
        async def answer_Name(message: types.Message, state: FSMContext):
            answer = message.text
            await state.update_data(answer_Name=answer)

            await bot.send_message(message.from_user.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
            await CastomerInfo.Phone_number.set()

        @dp.message_handler(state=CastomerInfo.Phone_number)
        async def answer_Phone_number(message: types.Message, state: FSMContext):
            answer = message.text
            await state.update_data(answer_Phone_number=answer)

            await bot.send_message(message.from_user.id, "–í–∞—à—ñ –¥–∞–Ω—ñ –ø—Ä–∏–π–Ω—è—Ç—ñ üëå")
            data=await state.get_data()
            name=data.get('answer_Name')
            number=data.get('answer_Phone_number')
            await bot.send_message(message.from_user.id, "{Name}, –≤–∞—à –Ω–æ–º–µ—Ä {Number}".format(Name=name, Number=number))
            print(message.from_user.id, message.from_user.first_name, " --write-- "+name+' '+number)
            await state.finish()





    elif message.text == 'üß∑ –ü–æ—Å–∏–ª–∞–Ω–Ω—è':
        await bot.send_message(message.from_user.id, '–ü–æ—Å–∏–ª–∞–Ω–Ω—è \n ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏èÔ∏èÔ∏è', reply_markup=NavButt.LinksMenu)
    elif message.text == 'üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
        await bot.send_message(message.from_user.id, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é \n ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏èÔ∏è', reply_markup=NavButt.MainMenu)
    elif message.text == 'üì∑ Instagram':
        await bot.send_message(message.from_user.id, InstaLink)
    elif message.text == 'üì∫ TikTok':
        await bot.send_message(message.from_user.id, TikTokLink)

    print(message.from_user.id, message.from_user.first_name, " --write-- ", message.text)

@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == 'ü™° –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—ñ–ª–∞':
        await bot.send_message(message.from_user.id, '–ú–æ–∂–µ—Ç–µ !!!!–≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—ñ–ª–∞, –∞–ª–µ –ø–æ–∫–∏ —â–æ —è –∑ –Ω–∏–º–∏ –Ω—ñ—á–æ–≥–æ –∑—Ä–æ–±–∏—Ç–∏ –Ω–µ –º–æ–∂—É ü§∑‚Äç‚ôÄÔ∏è')

"""
@dp.message_handler(commands=['info'])
async def enter_test(message: types.Message):
    await bot.send_message(message.from_user.id, "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –¥–∞–Ω—ñ –ø—Ä–æ —Å–µ–±–µ\n –í–∞—à–µ —ñ–º'—è")
    await CastomerInfo.Name.set()
@dp.message_handler(state=CastomerInfo.Name)
async def answer_Name(message: types.Message, state: FSMContext):
    answer=message.text
    await state.update_data(answer_Name=answer)

    await bot.send_message(message.from_user.id, "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –¥–∞–Ω—ñ –ø—Ä–æ —Å–µ–±–µ\n –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    await CastomerInfo.Phone_number.set()

@dp.message_handler(state=CastomerInfo.Phone_number)
async def answer_Phone_number(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer_Phone_number=answer)

    await bot.send_message(message.from_user.id, "–í–∞—à—ñ –¥–∞–Ω—ñ –ø—Ä–∏–π–Ω—è—Ç—ñ üëå")
    await state.finish()







"""


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


